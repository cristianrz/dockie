.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "DOCKIE" "1" "" "" ""
.hy
.SH NAME
.PP
Dockie - manage unprivileged chroot environments
.SH SYNOPSIS
.PP
dockie [-hv] {exec | image | ps | import | pull | rm | run}
.SH DESCRIPTION
.PP
Dockie is a wrapper around PRoot to manage unprivileged chroots with a
familiar interface.
.PP
PRoot, and therefore Dockie, are not security features and should not be
used as such.
PRoot should only be used as a \[lq]soft sandbox\[rq] where you can:
.IP \[bu] 2
test some other distros features,
.IP \[bu] 2
fake root privileges or
.IP \[bu] 2
build packages from source without polluting your environment
.PP
knowing that whatever gets into your PRoot will be able to get out into
your host OS.
.SS Pulling
.PP
Dockie is able to pull packages from the Docker Hub.
.PP
Dockie stores its data inside DOCKER_PATH, if the environment variable
is set, otherwise inside HOME/.dockie.
.PP
To pull images the image and version need to be speicifed from the
command line in the form of image:version.
Images that have been either pulled from a remote repository are stored
inside the images directory as a tarball together with a file containing
its formatted metadata.
.PP
As the repositories are provided by third-parties there is no built-in
search mechanism.
.PP
Images are not hashed or identified uniquely in any way.
This means that if an ubuntu:latest image is downloaded and later on
another ubuntu:latest image is downloaded which differs from the
previous (i.e.\ an update has been released), Dockie will overwrite the
previous image and will not keep track of different versions.
If an advanced user would need to keep track of different versions of
the same image, the import subcommand should be used.
.SS Importing
.PP
Dockie also allows importing local images as tarballs.
These tarballs need to only contain the root file system as Dockie will
take care of the metadata.
The only accepted format is .tar.
The name of the file will be used as the name of the image so it is
recommended not to use files such as rootfs.tar without renaming them
first.
.SS Running
.PP
The run command is effectively a combination of three steps:
.IP \[bu] 2
pull: if the image is not available locally and is available on the
remote repository Dockie pulls it from the repository.
.IP \[bu] 2
bootstrap: the tarball is extracted into a newly created directory
inside the guests directory.
/etc/profile and /etc/resolv.conf are created at this point.
Note that Dockie will always replace the existing resolv.conf file on
bootstrap but later changes to the file will be preserved.
.IP \[bu] 2
exec: if a command is passed, Dockie will exec the passed command inside
the guest.
.PP
This means that there are two ways to initialise Dockie guests.
The first one is with an initial pull and the run, which will use the
existing downloaded image.
Guests can also be downloaded implictly, i.e.\ if a guest wants to be
initialised with and image that is not inside the images directory,
Dockie will automatically pull that image and initialise the guest.
.PP
Run will always create a new guest and assign it a unique ID.
It extracts the selected image if it is available locally, otherwise it
pulls it from the configured remote repository.
If a command is specified it also runs the command.
.PP
Guests are inside the guests directory and include the rootfs directory
as well as a formatted metadata file.
.SS Executing
.PP
For guests that have already been creating, the exec subcommand will
execute a command inside the guest, usually /bin/sh or /bin/bash, but
any command can be used.
.PP
Each guest has an unique ID assigned to it, which can be checked with
the ls command.
To execute commands on a guest this ID needs to be used.
.PP
When executing PRoot, if a username has been passed as a command-line
argument it looks for the ID in the etc/password file to log in as that
specified user.
With that username it also sets the HOME environment variable.
On exec, the DISPLAY, TERM, BASH_ENV and ENV are passed to the guest.
Both DISPLAY and TERM have the same value as the guest while BASH_ENV
and ENV are set to /etc/profile to force the guest to read the profile
and therefore setting PS1 according to what Dockie specified during the
bootstrap process.
.PP
To avoid removing guests that are being used, when using exec, Dockie
creates a lock file inside the guest directory (but outside of the root)
so that rm can warn against removing locked guests.
If the file is prevented from being deleted (e.g.\ using chattr or
making the parent directory read-only), this will efectively prevent
that guest from being removed from Dockie.
.SS Options
.TP
-d
Debug mode
.TP
-h
Print usage
.TP
-v
Print version information and quit
.TP
-i \[en]install
If used with exec, this option is useful to safely create and install
packages into the guest rootfs.
It mounts the following files/directories from the host: /etc/host.conf,
/etc/hosts, /etc/nsswitch.conf, /etc/resolv.conf, /dev/, /sys/, /proc/,
/tmp/, /run/shm, HOME and path.
It is equivalent to proot -S.
.TP
-u \[en]user
If used with exec, specify the username.
.TP
-v \[en]volume
If used with exec, Dockie will instruct PRoot to mount a directory or
file from the host to the guest.
The file/directory must be specified in the form of /src_dir:/dst_dir
.SS Subcommands
.TP
exec \f[I]id\f[R] \f[I]command\f[R]
Run a command in a root filesystem identified by an id.
.TP
image ls
List images
.TP
image rm
Remove one or more images
.TP
ps
List guest filesystems
.TP
import \f[I]file\f[R]
Import the contents from a tarball to create an image
.TP
pull \f[I]image\f[R]
Pull an image
.TP
rm \f[I]id\f[R]
Remove one or more root filesystems
.TP
run \f[I]id\f[R] \f[I]command\f[R]
Run a command in a new root filesystem
.SH ENVIRONMENT
.TP
DOCKIE_PATH
Location for images and guests.
If unset, it defaults to $HOME/.dockie
.SH SEE ALSO
.PP
proot(1), chroot(1)
.SH AUTHORS
.TP
Cristian Ariza
Initial design
